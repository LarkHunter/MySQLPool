// 补充下概念 C++ 锁
1、为什么使用单例模式
http://www.cnblogs.com/seesea125/archive/2012/04/05/2433463.html

应该都知道一个单例模式怎样去实现：

1、构造函数声明为private或protect防止被外部函数实例化。

2、提供一个全局的静态方法（全局访问点）。

3、内部保存一个private static的类指针保存唯一的实例，实例的动作由一个public的类方法代劳，该方法也返回单例类唯一的实例。

一、 经典实现
class Usermanage
{
protected:
    singleton(){}
private:
    static singleton* p;
public:
    static singleton* instance();
};
singleton* singleton::p = NULL;
singleton* singleton::instance()
{
    if (p == NULL)
        p = new singleton();
    return p;
}

二、懒汉与饿汉

　　单例大约有两种实现方法：懒汉与饿汉。

懒汉：看名字就知道，不到万不得已就不会去实例化类，也就是说在第一次用到类实例的时候才会去实例化，所以上边的经典方法被归为懒汉实现；
饿汉：饿了肯定要饥不择食。所以在单例类定义的时候就进行实例化。
　　特点与选择：

由于要进行线程同步，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现，可以实现更好的性能。这是以空间换时间。
在访问量较小时，采用懒汉实现。这是以时间换空间。

三、线程安全的懒汉式单例模式
    方法1：加锁的经典懒汉实现：

    class singleton
    {
    protected:
        singleton()
        {
            pthread_mutex_init(&mutex);
        }
    private:
        static singleton* p;
    public:
        static pthread_mutex_t mutex;
        static singleton* initance();
    };
 
    pthread_mutex_t singleton::mutex;
    singleton* singleton::p = NULL;
    singleton* singleton::initance()
    {
        if(p == NULL)
        {
            pthread_mutex_lock(&mutex);
            if(p == NULL)
                p = new singleton();
            pthread_mutex_unlock(&mutex);
        }
    return p;
    }
    
    方法2：内部静态变量的懒汉实现

　　此方法也很容易实现，在instance函数里定义一个静态的实例，
也可以保证拥有唯一实例，在返回时只需要返回其指针就可以了。推荐这种实现方法
，真得非常简单。　　　
class singleton
{
protected:
    singleton()
    {
        pthread_mutex_init(&mutex);
    }
public:
    static pthread_mutex_t mutex;
    static singleton* initance();
    int a;
};
 
pthread_mutex_t singleton::mutex;
singleton* singleton::initance()
{
    pthread_mutex_lock(&mutex);
    static singleton obj;
    pthread_mutex_unlock(&mutex);
    return &obj;
}
    
四、饿汉实现
　　为什么我不讲“线程安全的饿汉实现”？因为饿汉实现本来就是线程安全的，不用加锁。为啥？自己想！

class singleton
{
protected:
    singleton()
    {}
private:
    static singleton* p;
public:
    static singleton* initance();
};

singleton* singleton::p = new singleton;

singleton* singleton::initance()
{
    return p;
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

